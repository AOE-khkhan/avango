{
  "name" : "FragmentColor",
  "source" : "

    void FragmentColor() {
      //vec4 c = vec4(0.2, 0.2, 0.2, 1.0);
      vec4 c = my_color;

      // project fragment position into the projective texture
      vec4 proj_tex_space_pos = projective_texture_matrix * view_texture_matrix * vec4(gua_world_position, 1.0);
      // projective normalization
      proj_tex_space_pos = proj_tex_space_pos / proj_tex_space_pos.w;
      vec2 proj_texcoord = proj_tex_space_pos.xy;


      vec4 view_tex_space_pos = view_texture_matrix * vec4(gua_world_position, 1.0);
      view_tex_space_pos = view_tex_space_pos / view_tex_space_pos.w;
      // check if vertex is in frustum of camera
      if ( (abs(proj_texcoord.x) < 1.0) && (abs(proj_texcoord.y) < 1.0) && (view_tex_space_pos.z < 0.0) )
      {
        // [-1, 1] -> [0, 1] 
        vec2 scaled_proj_txcrd = 0.5 * proj_texcoord + 0.5;
        vec2 rescaled_texcoords = ((vec2(1.0, 1.0) - scaled_proj_txcrd.xy) * view_port_max) + (scaled_proj_txcrd.xy * view_port_min);

        gua_uvs.xy = rescaled_texcoords;
/*
        // begin new version
        float fx = 6114.757;
        float fy = 6114.757;
        float cx= 2455.0;
        float cy= 3679.0;
        float image_width = 4910.0;
        float image_height = 7358.0;
        vec4 pos_rgb = view_texture_matrix * vec4(gua_world_position, 1.0);
        pos_rgb = pos_rgb/pos_rgb.w;
        float pos_rgb_u = (fx * pos_rgb.x/pos_rgb.z) + cx;
        float pos_rgb_v = (fy * pos_rgb.y/pos_rgb.z) + cy;
        pos_rgb_u = pos_rgb_u/image_width;
        pos_rgb_v = pos_rgb_v/image_height;

        //pos_rgb_u = 0.5 * pos_rgb_u + 0.5;
        //pos_rgb_v = 0.5 * pos_rgb_v + 0.5;
        // rescale into atlas
        //rescaled_texcoords = ((vec2(1.0, 1.0) - vec2(pos_rgb_u, pos_rgb_v)) * view_port_max) + (vec2(pos_rgb_u, pos_rgb_v) * view_port_min);

        vec2 x = vec2(pos_rgb_u, pos_rgb_v);
        vec2 c = view_port_min;
        vec2 d = view_port_max;
        vec2 a = vec2(0.0,0.0);
        vec2 b = vec2(1.0,1.0);
        

        rescaled_texcoords = (x-a) * (d-c)/(b-a) + c;
        //    def map_from_to(x,a,b,c,d):
        //y=(x-a)/(b-a)*(d-c)+c
        gua_uvs.xy = rescaled_texcoords;
        // end new version


        gua_emissivity = 1.0;
        //gua_uvs.xy = 0.5 * proj_texcoord + 0.5; 
      } else {
        gua_color = c.rgb;  
        gua_uvs.z = 0.0;
        gua_uvs.w = 0;
      }
      
      //gua_color = c.rgb;
/*      gua_roughness = 1.0;
      gua_metalness = 1.0;
      gua_emissivity = 0.0;
      gua_flags_passthrough = false;*/
      gua_alpha = c.a;
      //gua_alpha = 1.0;
    }
  ",
  "uniforms" :
  [ 
    {
      "name" : "projective_texture_matrix",
      "type" : "mat4",
      "value": "1"
    },
    {
      "name" : "view_texture_matrix",
      "type" : "mat4",
      "value": "1"
    },
    {
      "name" : "projective_texture",
      "type" : "sampler2D",
      "value": "1"
    },
    {
      "name" : "view_port_min",
      "type" : "vec2",
      "value": "1"
    },
    {
      "name" : "view_port_max",
      "type" : "vec2",
      "value": "1"
    },
    {
      "name" : "my_color",
      "type" : "vec4",
      "value": "1"
    }
  ]
}
